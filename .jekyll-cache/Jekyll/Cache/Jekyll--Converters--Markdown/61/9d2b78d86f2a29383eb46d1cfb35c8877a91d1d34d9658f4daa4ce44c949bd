I"<p>A level on the <a class="internal-link" href="/ladder-of-functional-programming">Ladder of Functional Programming</a>.</p>

<hr />

<h3 id="concepts">CONCEPTS</h3>
<ul>
  <li>Codata</li>
  <li>(Co)Recursion Schemes</li>
  <li>Advanced Optics</li>
  <li>Dual Abstractions (Comonad)</li>
  <li>Monad Transformers</li>
  <li>Free Monads &amp; Extensible Effects</li>
  <li>Functional Architecture</li>
  <li>Advanced Functors (Exponential, Profunctors, Contravariant)</li>
  <li>Embedded DSLs using GADTs, Finally Tagless</li>
  <li>Advanced Monads (Continuation, Logic)</li>
  <li>Type Families, Functional Dependencies</li>
</ul>

<h3 id="skills">SKILLS</h3>
<ul>
  <li>Design a minimally-powerful monad transformer stack</li>
  <li>Write concurrent and streaming programs</li>
  <li>Use purely functional mocking in tests</li>
  <li>Use type classes to modularly model different effects</li>
  <li>Recognize type patterns &amp; abstract over them</li>
  <li>Use functional libraries in novel ways</li>
  <li>Use optics to manipulate state</li>
  <li>Write custom lawful monad transformers</li>
  <li>Use free monads / extensible effects to separate concerns</li>
  <li>Encode invariants at the type level</li>
  <li>Effectively use FDs / type families to create safer code</li>
</ul>
:ET