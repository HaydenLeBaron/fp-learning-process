I"<p>A level on the <a class="internal-link" href="/ladder-of-functional-programming">Ladder of Functional Programming</a>.</p>

<hr />

<h3 id="concepts">CONCEPTS</h3>
<ul>
  <li>High-Performance</li>
  <li>Kind Polymorphism</li>
  <li>Generic Programming</li>
  <li>Type-Level Programming</li>
  <li>Dependent-Types, Singleton Types</li>
  <li>Category Theory</li>
  <li>Graph Reduction</li>
  <li>Higher-Order Abstract Syntax</li>
  <li>Compiler Design for <a class="internal-link" href="/m-functional-programming-language">M.Functional Programming Language</a>s</li>
  <li>Profunctor Optics</li>
</ul>

<h3 id="skills">SKILLS</h3>
<ul>
  <li>Design a generic, lawful library with broad appeal</li>
  <li>Prove properties manually using equational reasoning</li>
  <li>Design &amp; implement a new functional programming language</li>
  <li>Create novel abstractions with laws</li>
  <li>Write distributed systems with certain guarantees</li>
  <li>Use proof systems to formally prove properties of code</li>
  <li>Create libraries that do not permit invalid states</li>
  <li>Use dependent-typing to prove more properties at compile-time</li>
  <li>Understand deep relationships between different concepts</li>
  <li>Profile, debug, &amp; optimize purely functional code with minimal sacrifices</li>
</ul>
:ET