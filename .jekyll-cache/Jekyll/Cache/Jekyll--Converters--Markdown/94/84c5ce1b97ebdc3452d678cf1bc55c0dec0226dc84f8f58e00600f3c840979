I"j<p><a class="internal-link" href="/i-learning-level">I.Learning Level</a>,</p>

<h3 id="concepts">CONCEPTS</h3>
<ul>
  <li>Algebraic Data Types</li>
  <li>Pattern Matching</li>
  <li>Parametric Polymorphism</li>
  <li>General Recursion</li>
  <li>Type Classes, Instances &amp; Laws</li>
  <li>Lower-Order Abstractions (Equal, Order, Semigroup, Monoid, etc)</li>
  <li>Referential Transparency &amp; Totality</li>
  <li>Higher-Order Functions</li>
  <li>Partial-Application, Currying, &amp; Point-Free Style</li>
</ul>

<h3 id="skills">SKILLS</h3>
<ul>
  <li>Solve problems without nulls, exceptions, or type casts</li>
  <li>Process &amp; transform recursive data structures using recursion</li>
  <li>Able to use functional programming “in the small”</li>
  <li>Write basic monadic code for a concrete monad</li>
  <li>Create type class instances for custom data types</li>
  <li>Model a business domain with ADTs</li>
  <li>Write functions that take and return functions</li>
  <li>Reliably identify &amp; isolate pure code from impure code</li>
  <li>Avoid introducing unnecessary lambdas &amp; named parameters</li>
</ul>
:ET